---
title: "Camera data trapping experimentation"
format: html
editor: visual
---

# Chapter 5

## Install packages

```{r}
rm(list=ls())
source("TEAM library 1.7.R")
library(chron) 
library(reshape)
library(tidyverse)
library(here)
library (vegan)
library(plotrix)
library(ggplot2) # included in tidyverse 
#library(maptools)
# new for chapter 6 
library(unmarked)
library(AICcmodavg)
#library(MuMIn)
#library(plyr) # included in tidyverse
#library(R2jags)
```

## Read in the data

```{r}
data<-read.csv(file="Pre_2020_cam_data.csv", sep=",",h=T,stringsAsFactors=F)
data <- read.csv(here("Data","Pre_2020_cam_data.csv"))
```

## Prepare Data

### Rename Variables

```{r}
colnames(data)[16] <- "Sampling.Unit.Name"
colnames(data)[10] <- "Sampling.Event"
colnames(data)[5] <- "Start.Date"
colnames(data)[6] <- "End.Date"
colnames(data)[8] <- "Photo.Date"
colnames(data)[9] <- "Photo.Time"
colnames(data)[3] <- "td.photo"
colnames(data)[7] <- "bin"
```

### Change Dates

```{r}
data$Start.Date <- parse_date_time(data$Start.Date,"mdy") # changes the date format to year-month-day
data$End.Date <- parse_date_time(data$End.Date,"mdy")
data$td.photo <- parse_date_time(data$td.photo, "mdy_HM")
data$Photo.Date <- parse_date_time(data$Photo.Date, "mdy")
```

## (SKIP) IUCN Stuff

add the ICUN dataframe

```{r}
#iucn.full<-read.csv("IUCN.csv", sep=",",h=T)
#iucn<-iucn.full[,c("Class","Order","Family","Genus","Species")]
#team<-merge(iucn, team_data, all.y=T)
```

## (SKIP)"Fixing" the data

Creates two new columns - both of these are accounted for in my dataset

-   one with genus + species name

-   merge time and date

```{r}
#data<-fix.dta(team) 

#data<- droplevels(data[data$bin!="Homo sapiens", ]) # remove Homo sapiens from data set do not to get rid of humans - not part of the dataset 
```

## (SKIP) Extracting the year

Not applicable for my data - we are doing all years and only mammals in et

```{r}
#names(data)
#yr2009<-data[data$Sampling.Event =="2009.01" & #data$Class=="MAMMALIA",]
#unique(yr2009$bin) # binomial name of species
#unique(yr2009$Camera.Start.Date.and.Time)
#unique(yr2009$Camera.End.Date.and.Time)
```

## Descriptive analysis

### Get data for camera trap days

```{r}
camera_days<-cam.days(data,2020) # creates a new dataframe with a new column with the number of days within each unique range of time 
summary(camera_days[,2:4]) # just summarises the mean, 1st, 3rd, min, max for each column
write.table(camera_days, file="camera_days_2009.txt",quote=F, sep="\t",row.names = F) 
#turn into the a table
```

### Independent events per time interval

Thresh is a variable created here i think

Try new version of event.sp

```{r}
event.sp1 <- function(dtaframe, year, thresh) {
    # thresh= minutes
    require(reshape)
    hr <- f.separate.events(dtaframe, thresh)
    sel <- subset(hr, select = c(Sampling.Event, Sampling.Unit.Name, Photo.Date, bin, grp))
    del <- unique(sel)
    dta <- rename(del, c(value = "bin")) #changed code from original so that rename fits format c(new_name = "old_name")
    yrsel <- dta[dta$Sampling.Event == year, ]
    events <- cast(yrsel, Sampling.Unit.Name ~ value, length)
}
```

```{r}
events_hh<-event.sp1(dtaframe=data, year=2020, thresh=60) #  thresh in minutes
events_dd<-event.sp1(dtaframe=data, year=2020, thresh=1440) # number of minutes in a day
# creates a matrix with the sampling unit and the presence of species (number of detection)
```

saving away tables with events by species and camera site

```{r}
write.table(events_hh, file="my_events_hh.txt",quote=F, sep="\t")
write.table(events_dd, file="my_events_dd.txt",quote=F, sep="\t")
```

### Cumulative events per species (tables)

```{r}
events_hh_species<-colSums(events_hh)
write.table(events_hh_species, file="my_events_hh_species.txt", quote=F, sep="\t")

events_dd_species<-colSums(events_dd)
write.table(events_dd_species, file="my_events_dd_species.txt",quote=F, sep="\t")
```

### Cumulative events per site

```{r}
cameras<-rowSums(events_hh)
write.table(cameras, file="my_events_species.txt",quote=F, sep="\t")
```

## Naive Occupancy

```{r}
#yr2009<-data[data$Sampling.Event =="2009.01" & data$Class=="MAMMALIA",] #I don't think we have to do this
mat<-f.matrix.creator1(2020) # list of matrices camera x days for each species
# matrix of 124 x 58 - the 58 sampling units 
naive_occu_2009<-naive(mat) # get naive occupancy for each species


write.table(naive_occu_2009, file="naive_occu_2009.txt",quote=F, sep="\t",row.names = F)

```

f.matrix.creator error

Error in data\$Sampling.Unit.Name : \$ operator is invalid for atomic vectors

troubleshooting

The function

```{r}
f.matrix.creator1<-function(data){
	#results object
	res<-list()
	
	#get the dimensions of the matrix
	
	#list if sanpling units
	cams<-unique(data$Sampling.Unit.Name)
	cams<-sort(cams)
	rows<-length(cams)
	#start and end dates of sampling periods
	min<-min(data$Start.Date)
	max<-max(data$End.Date)
	cols<-max-min+1
	
	#sampling period
	date.header<-seq(from=min,to=max, by=86400)
	mat<-matrix(NA,rows,cols,dimnames=list(cams,as.character(date.header)))
	
	#for all cameras, determine the open and close date and mark in the matrix
	start.dates<-tapply(as.character(data$Start.Date),data$Sampling.Unit.Name,unique)
	end.dates<-tapply(as.character(data$End.Date),data$Sampling.Unit.Name,unique)
	
	#outline the sampling periods for each camera j
	for(j in 1:length(start.dates)){
		#for each camera beginning and end of sampling
		low<-which(date.header==start.dates[j])
		hi<-which(date.header==end.dates[j])
		indx<-seq(from=low,to=hi)
		mat[j,indx]<-0
		}
		mat.template<-mat
				#get the species
		species<-unique(data$bin)
		#construct the matrix for each species i
		for(i in 1:length(species)){
			indx<-which(data$bin==species[i])
			#dates and cameras when/where the species was photographed
			dates<-data$Photo.Date[indx]
			cameras<-data$Sampling.Unit.Name[indx]
			dates.cameras<-data.frame(dates,cameras)
			#unique combination of dates and cameras 
			dates.cameras<-unique(dates.cameras)
			#fill in the matrix
			for(j in 1:length(dates.cameras[,1])){
				col<-which(date.header==dates.cameras[j,1])
				row<-which(cams==dates.cameras[j,2])
				mat[row,col]<-1
				}
			mat.nas<-is.na(mat)
			sum.nas<-apply(mat.nas,2,sum)
			indx.nas<-which(sum.nas==rows)
			if(length(indx.nas)>0){
			mat<-mat[,-indx.nas]
			}
	
			res<-c(res,list(mat))
			#return the matrix to its original form
			mat<-mat.template
			}
			
		names(res)<-species
		#res<-lapply(res,f.dum)
		res
	
	}
```

##### Erika, This part below is where it is breaking.

un-functioning it

```{r}
#f.matrix.creator<-function(data){
	#results object
	res<-list() 
	
	#get the dimensions of the matrix
	
	#list if sanpling units
	cams<-unique(data$Sampling.Unit.Name)
	cams<-sort(cams)
	rows<-length(cams)
	#start and end dates of sampling periods
	min<-min(data$Start.Date)
	max<-max(data$End.Date)
	cols<-max-min+1
	
	#sampling period
	date.header<-seq(from=min,to=max, by=86400) # number of seconds in a day
	mat<-matrix(NA,rows,cols,dimnames=list(cams,as.character(date.header)))
	
	#for all cameras, determine the open and close date and mark in the matrix
	start.dates<-tapply(as.character(data$Start.Date),data$Sampling.Unit.Name,unique)
	end.dates<-tapply(as.character(data$End.Date),data$Sampling.Unit.Name,unique)
	
	#outline the sampling periods for each camera j
	for(j in 1:length(start.dates)){
		#for each camera beginning and end of sampling
		low<-which(date.header==data$Start.Date[j])
		hi<-which(date.header==data$End.Date[j])
		indx<-seq(from=low,to=hi)
		mat[j,indx]<-0
		}
	#	mat.template<-mat
				#get the species
		species<-unique(data$bin)
		#construct the matrix for each species i
		for(i in 1:length(species)){
			indx<-which(data$bin==species[i])
			#dates and cameras when/where the species was photographed
			dates<-data$Photo.Date[indx]
			cameras<-data$Sampling.Unit.Name[indx]
			dates.cameras<-data.frame(dates,cameras)
			#unique combination of dates and cameras 
			dates.cameras<-unique(dates.cameras)
			#fill in the matrix
			for(j in 1:length(dates.cameras[,1])){
				col<-which(date.header==dates.cameras[j,1])
				row<-which(cams==dates.cameras[j,2])
				mat[row,col]<-1
				}
			mat.nas<-is.na(mat)
			sum.nas<-apply(mat.nas,2,sum)
			indx.nas<-which(sum.nas==rows)
			if(length(indx.nas)>0){
			mat<-mat[,-indx.nas]
			}
	
			res<-c(res,list(mat))
			#return the matrix to its original form
			mat<-mat.template
			}
			
		names(res)<-species
		#res<-lapply(res,f.dum)
		res
	
	
```

Here is where the error is occuring mat\<-matrix(NA,rows,cols,dimnames=list(cams,as.character(date.header)))

```         
Error in matrix(NA, rows, cols, dimnames = list(cams, as.character(date.header))) :    length of 'dimnames' [2] not equal to array extent
```

the problem is that the date.header does no match the cols. the issue is that we have time and date in date.header, not just the date, making it a lot bigger.

fixed! - made the sequence increment for header 86400 - number of seconds in a day

## (SKIP FOR NOW) Plotting

```{r}
# accumulation curve  
accumulation<-acc.curve(data,2009.01)
write.table(accumulation, file="accsp_2009.txt",quote=F, sep="\t")
ggplot(accumulation, aes(x=Camera.trap.days, y=species)) +
  geom_line(aes(y=species-sd), colour="grey50", linetype="dotted") +
  geom_line(aes(y=species+sd), colour="grey50", linetype="dotted") +
  theme_bw() +
  geom_line()


# activity pattern of species 
activity_24h<-events.hours(yr2009)
write.table(activity_24h, file="events_24hour_2009.txt",quote=F, sep="\t",row.names = F)

activity_24h<-events.hours(data)

# example of plotting activity pattern of selected species (3 forest antelope)
clock<-c(0:23) 
clock24.plot(activity_24h$Cephalophus.harveyi,clock,show.grid=T,lwd=2,line.col="blue", main="Cephalophus.harveyi",cex.lab=0.5)

par(mfrow=c(1,3),cex.lab=0.5, cex.axis=0.5)
clock24.plot(activity_24h$Cephalophus.spadix,clock,show.grid=T,lwd=2,line.col="green", main="Cephalophus.spadix")
clock24.plot(activity_24h$Cephalophus.harveyi,clock,show.grid=T,lwd=2,line.col="blue", main="Cephalophus.harveyi")
clock24.plot(activity_24h$Nesotragus.moschatus,clock,show.grid=T,lwd=2,line.col="red", main="Nesotragus.moschatus")

# map of two species of sengi
library(maptools)
shape <- readShapeSpatial("park.shp", repair=T)

ev.dd.map<-merge(unique(data[,c("Sampling.Unit.Name","Longitude","Latitude")]),events_dd)
coord<-ev.dd.map[,c("Longitude","Latitude")]
xy <- project(as.matrix(coord), "+proj=utm +zone=37 +south +ellps=clrk80 +units=m +no_defs")
ev.dd.map$Longitude<-xy[,1]
ev.dd.map$Latitude<-xy[,2]

par(mfcol=c(1,2), mar=c(0.5,0.5,0.5,0.5), oma=c(1,1,1,1))
plot(shape,axes=F)
mtext("Rhynchocyon cirnei", cex = 1.5,font =3 )
Rc<-ev.dd.map[,c("Rhynchocyon cirnei")]/max(ev.dd.map[,c("Rhynchocyon cirnei")])

points(ev.dd.map[,"Longitude"],ev.dd.map[,"Latitude"],pch = 21,bg=grey(1-Rc))
plot(shape,axes=F)
mtext("Rhynchocyon udzungwensis",cex = 1.5, font =3)
Ru<-ev.dd.map[,c("Rhynchocyon udzungwensis")]/max(ev.dd.map[,c("Rhynchocyon udzungwensis")])
points(ev.dd.map[,"Longitude"],ev.dd.map[,"Latitude"],pch = 21,bg=grey(1-Ru))
```

# Chapter 6

## loading in data

basically recapping stuff from chapter 5

```{r}
team_data<-read.csv(file="Pre_2020_cam_data.csv", sep=",",h=T,stringsAsFactors=F) #do 
#can skip the rest in this chunk for my data 
#iucn.full<-read.csv("IUCN.csv", sep=",",h=T)
#iucn<-iucn.full[,c("Class","Order","Family","Genus","Species")]
#team<-merge(iucn, team_data, all.y=T)
#fd<-fix.dta(team)
#yr2009<-fd[fd$Sampling.Event =="2009.01" & fd$Class=="MAMMALIA",]
```

## Load co-variate data

can probably skip most of them, - need to standardize

```{r}
cov<-read.table("covariates.txt", header=TRUE) # table row per sampling unit
workingcam<-which(cov$Sampling.Unit.Name %in% unique(yr2009$Sampling.Unit.Name)) # removing cameras that did not work
cov.or<-cov[workingcam, ] # retain only working cameras in 2009
#we are using the cameras for all years and they are all working
cov.num<-cov.or[,sapply(cov.or,is.numeric)]
cov.std<-decostand(cov.num,method="standardize")
cov.fac<-cov.or[,sapply(cov.or,is.factor)]  # extract factor variables
covs<-data.frame(cov.fac, cov.std)
covs
```

## Create matrices for each species

remeber mat is cam x day 0 or 1 y/n

```{r}
mat.udz.09<-f.matrix.creator(yr2009)
names(mat.udz.09) # each species has its own table 
# I could just do this whole thing and then just export the two tables for porcupine and fisher 
naivetable<-naive(mat.udz.09) 
naivetable
```

## Case study - single species

### get new table?

```{r}
Cs<-shrink(mat.udz.09[["Cercocebus sanjei"]],5)
umCs<-unmarkedFrameOccu(y=Cs,siteCovs= covs)
```

### Creates models for variables

```{r}
m0<- occu(~1~1,umCs)
d1<- occu(~edge~1,umCs)
d2<- occu(~border~1,umCs)
d3<- occu(~edge+border~1,umCs)
o1<- occu(~1~border,umCs)
o2<- occu(~1~habitat,umCs)
o3<- occu(~1~habitat+border,umCs)
m1<- occu(~edge~border,umCs)         
m2<- occu(~border~border,umCs)
m3<- occu(~edge+border~border,umCs)  
m4<- occu(~edge~habitat,umCs)
m5<- occu(~border~habitat,umCs)
m6<- occu(~edge+border~habitat,umCs)
m7<- occu(~edge+border~habitat+border,umCs)
```

### Examine one model

```{r}
m1
backTransform(linearComb(m1, coefficients = c(1, 0), type = "det")) 
backTransform(linearComb(m1, coefficients = c(1, 0), type = "state"))
```

### Find model of best fit

```{r}
dlist<-fitList(Nullo = m0,d1=d1,d2=d2,d3=d3,o1=o1,o2=o2,o3=o3,m1=m1,m2=m2,m3=m3,m4=m4,m5=m5,m6=m6,m7=m7)
selmod<-modSel(dlist,nullmod="Nullo")
selmod
```

```{r}
newhab<-data.frame(habitat=c("Deciduous","Montane"))
pred<-predict(o2,type="state",newdata=newhab,appendData=T)
```

```{r}
ggplot(pred,aes(x=habitat,y=Predicted))+
  geom_point(size=4) +
  ylab("Predicted Psi Cercocebus sanjei") +
  theme_bw()+
  geom_errorbar(aes(ymin=Predicted-SE, ymax=Predicted+SE), width=.2)
```
