---
title: "Cam experiments based on trapping book "
author: "Evelyn Albrecht"
format: html
editor: visual
---

# Chapter 5

## Install packages

```{r}
rm(list=ls())
source("Code/TEAM library 1.7.R")
library(chron) 
library(reshape)
library(tidyverse)
<<<<<<< HEAD

library(lubridate)
library(hms)

library("here")

=======
library(lubridate)
library(hms)
>>>>>>> febf99f (update data experimenting.qmd)
library (vegan)
library(plotrix)
library(ggplot2) # included in tidyverse 
#library(maptools)
# new for chapter 6 
library(unmarked)
library(AICcmodavg)
#library(MuMIn)
#library(plyr) # included in tidyverse
#library(R2jags)
```

## Read in the data

```{r}
data<-read.csv(file="Data/Pre_2020_cam_data.csv", sep=",",h=T,stringsAsFactors=F)
```

## Prepare Data

Fix the situation for C003_SD005 where it is two different deployments. Name second deployment C003_SD0052

```{r}
find<- which(data$Cam.SD == "C003_SD005" & data$cam.start.date == "5/10/19")
data$Cam.SD[find] <- "C003_SD0052"
#data %>% filter(Cam.SD =="C003_SD0052") %>% View()
```

### Rename Variables

```{r}
#rename columns to match TEAM example in book
colnames(data)[16] <- "Sampling.Unit.Name"
colnames(data)[10] <- "Sampling.Event"
colnames(data)[5] <- "Start.Date"
colnames(data)[6] <- "End.Date"
colnames(data)[8] <- "Photo.Date"
colnames(data)[9] <- "Photo.Time"
colnames(data)[3] <- "td.photo"
colnames(data)[7] <- "bin"
```

### Change Dates

```{r}
data$td.photo <- mdy_hm(data$td.photo)
data$Start.Date <- mdy(data$Start.Date)
data$End.Date <- mdy(data$End.Date)
data$Photo.Date <- mdy(data$Photo.Date)
data$Photo.Time <- as_hms(data$td.photo)
```
<<<<<<< HEAD

=======
>>>>>>> febf99f (update data experimenting.qmd)

## Descriptive analysis

### Get data for camera trap days

```{r}
camera_days<-cam.days(data,2020) # creates a new dataframe with a new column with the number of days within each unique range of time 
summary(camera_days[,2:4]) # just summarises the mean, 1st, 3rd, min, max for each column
#write.table(camera_days, file="camera_days_2009.txt",quote=F, sep="\t",row.names = F) 
#turn into the a table
```

### Independent events per time interval

Thresh is a variable created here i think

Try new version of event.sp

```{r}
event.sp1 <- function(dtaframe, year, thresh) {
    # thresh= minutes
    require(reshape)
    hr <- f.separate.events(dtaframe, thresh)
    sel <- subset(hr, select = c(Sampling.Event, Sampling.Unit.Name, Photo.Date, bin, grp))
    del <- unique(sel)
    dta <- rename(del, c(value = "bin")) #changed code from original so that rename fits format c(new_name = "old_name")
    yrsel <- dta[dta$Sampling.Event == year, ]
    events <- cast(yrsel, Sampling.Unit.Name ~ value, length)
}
```

```{r}
events_hh<-event.sp1(dtaframe=data, year=2020, thresh=60) #  thresh in minutes
events_dd<-event.sp1(dtaframe=data, year=2020, thresh=1440) # number of minutes in a day
# creates a matrix with the sampling unit and the presence of species (number of detection)
```

saving away tables with events by species and camera site

```{r}
# write.table(events_hh, file="my_events_hh.txt",quote=F, sep="\t")
# write.table(events_dd, file="my_events_dd.txt",quote=F, sep="\t")
```

### Cumulative events per species (tables)

```{r}
events_hh_species<-colSums(events_hh)
#write.table(events_hh_species, file="my_events_hh_species.txt", quote=F, sep="\t")

events_dd_species<-colSums(events_dd)
#write.table(events_dd_species, file="my_events_dd_species.txt",quote=F, sep="\t")
```

### Cumulative events per site

```{r}
cameras<-rowSums(events_hh)
#write.table(cameras, file="my_events_species.txt",quote=F, sep="\t")
```

## Naive Occupancy

Make new version of f.matrix.creator called f.matrix.creator1

```{r}
f.matrix.creator1<-function(data){
	#results object
	res<-list()
	
	#get the dimensions of the matrix
	
	#list if sanpling units
	cams<-unique(data$Sampling.Unit.Name)
	cams<-sort(cams)
	rows<-length(cams)
	#start and end dates of sampling periods
	min<-min(data$Start.Date)
	max<-max(data$End.Date)
	cols<-max-min+1
	
	#sampling period
	date.header<-seq(from=min,to=max, by=1)
	mat<-matrix(NA,rows,cols,dimnames=list(cams,as.character(date.header)))
	
	#for all cameras, determine the open and close date and mark in the matrix
	start.dates<-tapply(as.character(data$Start.Date),data$Sampling.Unit.Name,unique)
	#convert to data frame
	start.dates <- stack(start.dates) #convert to data frame
	names(start.dates) <- c("Start.Date", "Sampling.Unit.Name")
	
	end.dates<-tapply(as.character(data$End.Date),data$Sampling.Unit.Name,unique)
	end.dates <- stack(end.dates) #convert to data frame
	names(end.dates) <- c("End.Date", "Sampling.Unit.Name")
	

	#outline the sampling periods for each camera j
	for(j in 1:length(start.dates)){
		#for each camera beginning and end of sampling
	  
		low<-which(date.header==data$Start.Date[j])
		hi<-which(date.header==data$End.Date[j])
		indx<-seq(from=low,to=hi)
		mat[j,indx]<-0
		}
		mat.template<-mat
				#get the species
		species<-unique(data$bin)
		#construct the matrix for each species i
		for(i in 1:length(species)){
			indx<-which(data$bin==species[i])
			#dates and cameras when/where the species was photographed
			dates<-data$Photo.Date[indx]
			cameras<-data$Sampling.Unit.Name[indx]
			dates.cameras<-data.frame(dates,cameras)
			#unique combination of dates and cameras 
			dates.cameras<-unique(dates.cameras)
			#fill in the matrix
			for(j in 1:length(dates.cameras[,1])){
				col<-which(date.header==dates.cameras[j,1])
				row<-which(cams==dates.cameras[j,2])
				mat[row,col]<-1
				}
			mat.nas<-is.na(mat)
			sum.nas<-apply(mat.nas,2,sum)
			indx.nas<-which(sum.nas==rows)
			if(length(indx.nas)>0){
			mat<-mat[,-indx.nas]
			}
	
			res<-c(res,list(mat))
			#return the matrix to its original form
			mat<-mat.template
			}
			
		names(res)<-species
		#res<-lapply(res,f.dum)
		res
	
	}
```

```{r}
mat<-f.matrix.creator1(data) # list of matrices camera x days for each species
# matrix of 124 x 58 - the 58 sampling units 
NAI<-naive(mat) # get naive occupancy for each species


<<<<<<< HEAD

#write.table(naive_occu_2009, file="naive_occu_2009.txt",quote=F, sep="\t",row.names = F)

```

##Plotting
Retrofit their acc.curve function to match with f.matrix.creator1
=======
write.table(NAI, file="naive_occu_2020.txt",quote=F, sep="\t",row.names = F)

```

## (SKIP FOR NOW) Plotting

```{r}
# accumulation curve  
accumulation<-acc.curve(data,2020)
```
>>>>>>> 9230bf0 (workshoping covariate stuff)
=======
#write.table(naive_occu_2009, file="naive_occu_2009.txt",quote=F, sep="\t",row.names = F)

```

##Plotting Retrofit their acc.curve function to match with f.matrix.creator1
>>>>>>> febf99f (update data experimenting.qmd)

```{r}
# the function returns the observed species accumulation curve for a given year
acc.curve <- function(dtaframe, year) {
    require(reshape)
    require(vegan)
    yr <- dtaframe[dtaframe$Sampling.Event == year, ]
    mat <- f.matrix.creator1(yr)
    pr <- melt(mat)
    colnames(pr) <- c("Sampling.Unit.Name", "Date", "value", "species")
    ev.sp <- cast(na.omit(pr), Sampling.Unit.Name + Date ~ species, sum)
    ac <- specaccum(ev.sp[, -c(1:2)], method = "random", permutations = 100)
    mt <- data.frame(ac$sites, ac$richness, ac$sd)
    colnames(mt) <- c("Camera.trap.days", "species", "sd")
    return(mt)
}
```

```{r}
# accumulation curve  
accumulation<-acc.curve(data,2020)
#write.table(accumulation, file="accsp_2009.txt",quote=F, sep="\t")
ggplot(accumulation, aes(x=Camera.trap.days, y=species)) +
  geom_line(aes(y=species-sd), colour="grey50", linetype="dotted") +
  geom_line(aes(y=species+sd), colour="grey50", linetype="dotted") +
  theme_bw() +
  geom_line()
```

### Works to here
Need to fix their events.hours function. Here's the code to tweak:

```{r}
# the function returns the matrix species by hours to be used for activity profile (it uses all the available years)
events.hours <- function(dtaframe) {
    require(reshape)
    require(chron)
    dtaframe$ore <- trunc(dtaframe$Photo.Time, "hours")
    selvar <- subset(dtaframe, select = c(Sampling.Unit.Name, Photo.Date, bin, ore))
    ev.hr <- unique(selvar)
    ev.hr <- ev.hr %>% rename(value = ore)
    ev.sp <- cast(ev.hr, value ~ bin, length)
    colnames(ev.sp) <- sub(" ", ".", colnames(ev.sp))
    return(ev.sp)
}
```




<<<<<<< HEAD
```{r}
# activity pattern of species 
#need variable that corresponds to the book's yr2009
#they use yr2009<-data[data$Sampling.Event =="2009.01" & data$Class=="MAMMALIA",] #Should just correspond to our data


activity_24h<-events.hours(data)
write.table(activity_24h, file="events_24hour_2020.txt",quote=F, sep="\t",row.names = F)


activity_24h<-events.hours(data)

# example of plotting activity pattern of selected species (3 species; porcupine, fisher, snowshoehare)
clock<-c(0:23) 
clock24.plot(activity_24h$PORCUPINE,clock,show.grid=T,lwd=2,line.col="blue", main="Porcupine",cex.lab=0.5)

par(mfrow=c(1,3),cex.lab=0.5, cex.axis=0.5)
clock24.plot(activity_24h$PORCUPINE,clock,show.grid=T,lwd=2,line.col="green", main="Porcupine")
clock24.plot(activity_24h$FISHER,clock,show.grid=T,lwd=2,line.col="blue", main="Fisher")
clock24.plot(activity_24h$SNOWSHOEHARE,clock,show.grid=T,lwd=2,line.col="red", main="Snowshoe hare")
```


=======
Need to fix their events.hours function. Here's the code to tweak:
>>>>>>> febf99f (update data experimenting.qmd)

```{r}
# the function returns the matrix species by hours to be used for activity profile (it uses all the available years)
events.hours <- function(dtaframe) {
    require(reshape)
    require(chron)
    dtaframe$ore <- trunc(dtaframe$Photo.Time, "hours")
    selvar <- subset(dtaframe, select = c(Sampling.Unit.Name, Photo.Date, bin, ore))
    ev.hr <- unique(selvar)
    ev.hr <- ev.hr %>% rename(value = ore)
    ev.sp <- cast(ev.hr, value ~ bin, length)
    colnames(ev.sp) <- sub(" ", ".", colnames(ev.sp))
    return(ev.sp)
}
```

<<<<<<< HEAD
=======
```{r}
# activity pattern of species 
#need variable that corresponds to the book's yr2009
#they use yr2009<-data[data$Sampling.Event =="2009.01" & data$Class=="MAMMALIA",] #Should just correspond to our data

activity_24h<-events.hours(data)

# example of plotting activity pattern of selected species (3 species; porcupine, fisher, snowshoehare)
clock<-c(0:23) 
clock24.plot(activity_24h$PORCUPINE,clock,show.grid=T,lwd=2,line.col="blue", main="Porcupine",cex.lab=0.5)

par(mfrow=c(1,3),cex.lab=0.5, cex.axis=0.5)
clock24.plot(activity_24h$PORCUPINE,clock,show.grid=T,lwd=2,line.col="green", main="Porcupine")
clock24.plot(activity_24h$FISHER,clock,show.grid=T,lwd=2,line.col="blue", main="Fisher")
clock24.plot(activity_24h$SNOWSHOEHARE,clock,show.grid=T,lwd=2,line.col="red", main="Snowshoe hare")
```

Getting rid of mapping as camera locations not in data
>>>>>>> febf99f (update data experimenting.qmd)

# Chapter 6

## loading in data

<<<<<<< HEAD
basically recapping stuff from chapter 5
Let's clean up
```{r}

=======
basically recapping stuff from chapter 5 Let's clean up

```{r}
>>>>>>> febf99f (update data experimenting.qmd)
rm(list = ls())
source("Code/TEAM library 1.7.R")
library(chron) 
library(reshape)
library(tidyverse)
library(lubridate)
library(hms)
library (vegan)
library(plotrix)
library(ggplot2) # included in tidyverse 
#library(maptools)
# new for chapter 6 
library(unmarked)
library(AICcmodavg)
#library(MuMIn)
#library(plyr) # included in tidyverse
#library(R2jags)
<<<<<<< HEAD


data1<- read.csv(here("Data","Pre_2020_cam_data.csv"))
#do 
#can skip the rest in this chunk for my data 
#iucn.full<-read.csv("IUCN.csv", sep=",",h=T)
#iucn<-iucn.full[,c("Class","Order","Family","Genus","Species")]
#team<-merge(iucn, team_data, all.y=T)
#fd<-fix.dta(team)
#yr2009<-fd[fd$Sampling.Event =="2009.01" & fd$Class=="MAMMALIA",]

```


=======
```

>>>>>>> febf99f (update data experimenting.qmd)
## Load data

can probably skip most of them, - need to standardize

```{r}
<<<<<<< HEAD

=======
>>>>>>> febf99f (update data experimenting.qmd)
cov<-read.table("Data/covariates.txt", header=TRUE) # table row per sampling unit
data <-read.csv("Data/teamexample.csv", header = TRUE)
yr2009<-data[data$Sampling.Event =="2009.01",]
workingcam<-which(cov$Sampling.Unit.Name %in% unique(yr2009$Sampling.Unit.Name)) # removing cameras that did not work
cov.or<-cov[workingcam, ] # retain only working cameras in 2009
<<<<<<< HEAD
#we are using the cameras for all years and they are all working
cov.num<-cov.or[,sapply(cov.or,is.numeric)]
cov.std<-decostand(cov.num,method="standardize") #z-score normalization; according to ChatGPT: With method = "standardize", the function:
# 	•	Centers each variable (i.e., subtracts the mean),
# 	•	Then scales it (i.e., divides by the standard deviation),
# 	•	So each column ends up with a mean of 0 and a standard deviation of 1.
# 
# This is also known as z-score normalization.
# 
# Standardizing is helpful when:
# 	•	Your variables are on different scales (e.g., one is in meters, another in kilograms),
# 	•	You want to compare variables fairly (e.g., in PCA, clustering, or ordination),
# 	•	You’re preparing data for many ecological or multivariate analyses in vegan.
cov.fac<-cov.or[,sapply(cov.or,is.factor)]  # extract factor variables
covs<-data.frame(cov.fac, cov.std)
covs

cov1<-read.table(here("Data","ERDO_PEPE_covariates.txt")) # table row per sampling unit
#workingcam<-which(cov$Sampling.Unit.Name %in% unique(data$Sampling.Unit.Name)) # removing cameras that did not work
#cov.or<-cov[workingcam, ] # retain only working cameras in 2009
#we are using the cameras for all years and they are all working
#cov.num<-cov.or[,sapply(cov.or,is.numeric)]
```


``` {r}
cov1.std<-decostand(cov1[,3:218],method="standardize")
our_covs <- cov1.std # gives us what they use in the book as the covs
#We can skip these next couple of lines because we have no factor variables
#cov.fac<-cov.or[,sapply(cov.or,is.factor)]  # extract factor variables
#covs<-data.frame(cov.fac, cov.std)
#covs
#okay... there is nothing in here. lets see what is going on

=======
#we are using the cameras for all years and they are all working
cov.num<-cov.or[,sapply(cov.or,is.numeric)]
cov.std<-decostand(cov.num,method="standardize") #z-score normalization; according to ChatGPT: With method = "standardize", the function:
# 	•	Centers each variable (i.e., subtracts the mean),
# 	•	Then scales it (i.e., divides by the standard deviation),
# 	•	So each column ends up with a mean of 0 and a standard deviation of 1.
# 
# This is also known as z-score normalization.
# 
# Standardizing is helpful when:
# 	•	Your variables are on different scales (e.g., one is in meters, another in kilograms),
# 	•	You want to compare variables fairly (e.g., in PCA, clustering, or ordination),
# 	•	You’re preparing data for many ecological or multivariate analyses in vegan.
cov.fac<-cov.or[,sapply(cov.or,is.factor)]  # extract factor variables
covs<-data.frame(cov.fac, cov.std)
covs
>>>>>>> febf99f (update data experimenting.qmd)
```

## Create matrices for each species

remeber mat is cam x day 0 or 1 y/n

Need column called Start.Date and End.Date in yr2009 that is POSIXct and also need genus species in a column called bin

Need column called Start.Date and End.Date in yr2009 that is POSIXct and also need genus species in a column called bin
```{r}
<<<<<<< HEAD

yr2009$Start.Date <-as_date(ymd_hms(yr2009$Camera.Start.Date.and.Time))
yr2009$End.Date <- as_date(ymd_hms(yr2009$Camera.End.Date.and.Time))
yr2009$bin <- paste0(yr2009$Genus, " ", yr2009$Species)
```


```{r}
mat.udz.09<-f.matrix.creator1(yr2009)
names(mat.udz.09) # each species has its own table 

find<- which(data1$Cam.SD == "C003_SD005" & data1$cam.start.date == "5/10/19")
view(data1[find,])
data1$Cam.SD[find] <- "C003_SD0052"
data1 %>% filter(Cam.SD =="C003_SD0052") %>% View()
=======
yr2009$Start.Date <-as_date(ymd_hms(yr2009$Camera.Start.Date.and.Time))
yr2009$End.Date <- as_date(ymd_hms(yr2009$Camera.End.Date.and.Time))
yr2009$bin <- paste0(yr2009$Genus, " ", yr2009$Species)
>>>>>>> febf99f (update data experimenting.qmd)
```

```{r}
<<<<<<< HEAD
colnames(data1)[16] <- "Sampling.Unit.Name"
colnames(data1)[10] <- "Sampling.Event"
colnames(data1)[5] <- "Start.Date"
colnames(data1)[6] <- "End.Date"
colnames(data1)[8] <- "Photo.Date"
colnames(data1)[9] <- "Photo.Time"
colnames(data1)[3] <- "td.photo"
colnames(data1)[7] <- "bin"
```

Change Dates

``` {r}
data1$Start.Date <- parse_date_time(data1$Start.Date,"mdy") # changes the date format to year-month-day
data1$End.Date <- parse_date_time(data1$End.Date,"mdy")
data1$td.photo <- parse_date_time(data1$td.photo, "mdy_HM")
data1$Photo.Date <- parse_date_time(data1$Photo.Date, "mdy")
```


repeat the steps for preparing the data

```{r}
mat.cams<-f.matrix.creator1(data1)
names(mat.cams) # each species has its own table 


mat.udz.09<-f.matrix.creator1(yr2009)
names(mat.udz.09) # each species has its own table 

# I could just do this whole thing and then just export the two tables for porcupine and fisher 
naivetable<-naive(mat.udz.09) 
naivetable
```


## Case study - single species

### get new table?

```{r}
Cs<-shrink(mat.udz.09[["Cercocebus sanjei"]],5)
umCs<-unmarkedFrameOccu(y=Cs,siteCovs= covs)
```

### Creates models for variables

```{r}
m0<- occu(~1~1,umCs)
d1<- occu(~edge~1,umCs)
d2<- occu(~border~1,umCs)
d3<- occu(~edge+border~1,umCs)
o1<- occu(~1~border,umCs)
o2<- occu(~1~habitat,umCs)
o3<- occu(~1~habitat+border,umCs)
m1<- occu(~edge~border,umCs)         
m2<- occu(~border~border,umCs)
m3<- occu(~edge+border~border,umCs)  
m4<- occu(~edge~habitat,umCs)
m5<- occu(~border~habitat,umCs)
m6<- occu(~edge+border~habitat,umCs)
m7<- occu(~edge+border~habitat+border,umCs)
```

### Examine one model

```{r}
m1
backTransform(linearComb(m1, coefficients = c(1, 0), type = "det")) 
backTransform(linearComb(m1, coefficients = c(1, 0), type = "state"))
```

### Find model of best fit

```{r}
dlist<-fitList(Nullo = m0,d1=d1,d2=d2,d3=d3,o1=o1,o2=o2,o3=o3,m1=m1,m2=m2,m3=m3,m4=m4,m5=m5,m6=m6,m7=m7)
selmod<-modSel(dlist,nullmod="Nullo")
selmod
```

```{r}
newhab<-data.frame(habitat=c("Deciduous","Montane"))
pred<-predict(o2,type="state",newdata=newhab,appendData=T)
```

```{r}
ggplot(pred,aes(x=habitat,y=Predicted))+
  geom_point(size=4) +
  ylab("Predicted Psi Cercocebus sanjei") +
  theme_bw()+
  geom_errorbar(aes(ymin=Predicted-SE, ymax=Predicted+SE), width=.2)
```
